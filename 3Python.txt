$$$ 1
The collection of all computer devices:
+A) Hardware
B) Typical support 
C) Functional support
D) Communication support
E) Iron

$$$ 2
A collection of computer programs:
A) Hardware
B) Typical support
+C) Software
D) Functional support
E) Operational support

$$$ 3
Type of software, which includes operating systems, network software, service programs, as well as software development tools:
+A) System
B) Applied
C) Basic
D) Office
E) Custom

$$$ 4
Programs that are used only for entering and editing text:
+A) Text editors
B) word processors
C) Automatic text recognition systems
D) Spreadsheets
E) Graphic Editors

$$$ 5
A program or device that translates information from a language that is understandable to a person into a language that is understandable to the device:
A) Compiler
B) Interpreter
+C) Translator
D) Execution
E) Trace

$$$ 6
Types of Translators:
+A) Compiler
+B) Interpreter
C) Translator
D) Execution
E) Trace

$$$ 7
The process of broadcasting a program in which a program is broadcast without executing it:
+A) Compiler
B) Interpreter
C) Translator
D) Execution
E) Trace

$$$ 8
The process of converting a program presented in one of the programming languages into an object file:
A) Compiler
B) Interpreter
+C) Translator
D) Execution
E) Trace

$$$ 9
Program Step-by-Step Process:
A) Compiler
B) Interpreter
C) Translator
D) Execution
+E) Trace

$$$ 10
Programming languages that are approaching the machine level:
A) Compiler
B) Interpreter
C) Translator
D) Run (Execution)
E) Trace
+F) Low level languages
G) High level languages

$$$ 11
Programming languages that are close to human thinking:
A) Compiler
B) Interpreter
C) Translator
D) Run (Execution)
E) Trace
F) Low level languages
+G) High level languages

$$$ 12
Characteristics of a programming language Python:
+A) High level language
+B) Interpreted 
+C) Object oriented
D) Logical
E) Design 

$$$ 13
Programming language versions Python:
A) Python 1
+B) Python 2
+C) Python 3
D) Python 4
E) Python 5

$$$ 14
Python data types:
+A) Literal constants
+B) Numbers
+C) String
D) Therm
E) Predicate
F) Fact
G) Clauses

$$$ 15
Value in Python 3 code:
+A) Literal
B) Numbers
C) String
D) Identifier
E) Operator
F) Variable
G) Expression

$$$ 16
Representation of Operations in Python 3 Code:
A) Literal
B) Numbers
C) String
D) Identifier
+E) Operator
F) Variable
G) Expression

$$$ 17
Representation of a name (Names that are given to object references):
A) Literal
B) Numbers
C) String
+D) Identifier
E) Operator
F) Variable
G) Expression

$$$ 18
A name associated with a value that tracks the change in value as it is calculated:
A) Literal
B) Numbers
C) String
D) Identifier
E) Operator
+F) Variable
G) Expression

$$$ 19
A combination of literals, variables, and operators, evaluated by Python to obtain a value (write a sequence of operations):
A) Literal
B) Numbers
C) String
D) Identifier
E) Operator
F) Variable
+G) Expression

$$$ 20
Each Python object is characterized by:
A) Literal
+B) Identifier
+C) Value
+D) Type
E) Operator
F) Variable
G) Expression

$$$ 21
A character sequence or str data type for processing text in Python 3:
A) Literal
B) Numbers
+C) String
D) Identifier
E) Operator
F) Variable
G) Expression

$$$ 22
An int data type, a sequence of numbers from 0 to 9 in Python 3:
A) Literal
+B) Integers
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 23
Float data type, decimal point sequence in Python 3:
A) Literal
B) Integers
C) String
+D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 24
Bool data type, True and False:
+A) Literal
B) Integers
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression


$$$ 25
Arithmetic operations. Operator (+):
+A) Addition
B) Subtraction
C) Multiplication
D) Division
E) Modulo Division
F) Integer division
G) Exponentiation (¬озведение в степень)

$$$ 26
Arithmetic operations. Operator (-):
A) Addition
+B) Subtraction
C) Multiplication
D) Division
E) Modulo Division
F) Integer division
G) Exponentiation (¬озведение в степень)

$$$ 27
Arithmetic operations. Operator (*):
A) Addition
B) Subtraction
+C) Multiplication
D) Division
E) Modulo Division
F) Integer division
G) Exponentiation (¬озведение в степень)

$$$ 28
Arithmetic operations. Operator (/):
A) Addition
B) Subtraction
C) Multiplication
+D) Division
E) Modulo Division
F) Integer division
G) Exponentiation (¬озведение в степень)

$$$ 29
Arithmetic operations. Operator (%):
A) Addition
B) Subtraction
C) Multiplication
D) Division
+E) Modulo Division
F) Integer division
G) Exponentiation (¬озведение в степень)

$$$ 30
Arithmetic operations. Operator (//):
A) Addition
B) Subtraction
C) Multiplication
D) Division
E) Modulo Division
+F) Integer division
G) Exponentiation (¬озведение в степень)

$$$ 31
Arithmetic operations. Operator (**):
A) Addition
B) Subtraction
C) Multiplication
D) Division
E) Modulo Division
F) Integer division
+G) Exponentiation (¬озведение в степень)

$$$ 32
Comparing values in Python 3. The operator (= =) used to compare two operands:
+A) Equality
B) Inequality
C) More
D) Less
E) Greater than or equal to
F) Less than or equal

$$$ 33
Comparing values in Python 3. The operator (!= ) used to compare two operands:
двух операндов:
A) Equality
+B) Inequality
C) More
D) Less
E) Greater than or equal to
F) Less than or equal

$$$ 34
Comparing values in Python 3. The operator ( >) used to compare two operands:
A) Equality
B) Inequality
+C) More
D) Less
E) Greater than or equal to
F) Less than or equal

$$$ 35
Comparing values in Python 3. The operator ( <) used to compare two operands:
A) Equality
B) Inequality
C) More
+D) Less
E) Greater than or equal to
F) Less than or equal

$$$ 36
Comparing values in Python 3. The operator ( <=) used to compare two operands:
A) Equality
B) Inequality
C) More
D) Less
E) Greater than or equal to
+F) Less than or equal

$$$ 37
Comparing values in Python 3. The operator (>=) used to compare two operands:
A) Equality
B) Inequality
C) More
D) Less
+E) Greater than or equal to
F) Less than or equal

$$$ 38
Evaluation logic in Python 3. The logical operator (and) used to compare two operands:
A) Equality
B) Inequality
C) More
+D) Logical AND
E) Logical OR
F) Logical NOT

$$$ 39
ќценочна€ логика в Python 3. Logical operators that have a value of a logical (Boolean) type, i.e. True or False: 
A) Equality
B) Inequality
C) More
+D) Logical AND
+E) Logical OR
+F) Logical NOT

$$$ 40
Evaluation logic in Python 3. A logical operator (or) used to compare two operands:
A) Equality
B) Inequality
C) More
D) Logical AND
+E) Logical OR
F) Logical NOT

$$$ 41
Evaluation logic in Python 3. A logical operator (not) used to compare two operands:
A) Equality
B) Inequality
C) More
D) Logical AND
E) Logical OR
+F) Logical NOT

$$$ 42
Basic string operations in Python:
A) Equality
+B) Change case
+C) Concatenation
+D) Delete the space
E) Logical OR
F) Logical NOT

$$$ 43
Python.  A term for describing a change in the order of operators in a program:
+A) —ontrol flow   
B) Change case
C) Concatenation
D) Delete the space
E) Logical OR
F) Logical NOT

$$$ 44
Python.  Instructions that allow you to build logical conditions depending on certain conditions:
A) —ontrol flow   
+B) Conditional expressions
C) Concatenation
D) Delete the space
E) Logical OR
F) Logical NOT

$$$ 45
Python.  Logical Operator - Inverse:
A) —ontrol flow   
B) Conditional expressions
C) Concatenation
D) Delete the space
E) Logical OR
+F) Logical NOT

$$$ 46
Python.  Instructions, if the condition is true, then the block of expressions Уif-blockФ is executed, otherwise another block of expressions Уelse-blockФ is executed:
A) Control flow   
B) Loop 
+C) if Ц elif - else
D) for 
E) while
F) print ()
G) input ()
H) #

$$$ 47
Python.  ќператор комментариев:
A) Control flow   
B) Loop 
C) if Ц elif - else
D) for 
E) while
F) print ()
G) input ()
+H) # 

$$$ 48
Python.  An operator that repeatedly executes a block of commands until some condition is run:
A) Control flow   
B) Comments
C) if Ц elif - else
D) for 
+E) while
F) print ()
G) input ()
H) #

$$$ 49
Python.  A loop statement that iterates over an iterable object (such as a line or list), and executes the loop body during each pass:
A) Control flow   
B) Comments
C) if Ц elif - else
+D) for -in
E) while 
F) print ()
G) input ()
H) #  

$$$ 50
Python.  Loop statement that is designed to interrupt the loop:
A) Control flow   
B) Comments
C) if Ц elif Ц else
D) for -in
E) while 
F) print ()
G) input ()
+H) break 

$$$ 51
Python.  An operator that allows you to skip all the remaining commands in the current block of the loop and continue with the next iteration of the loop:
A) Control flow      
+B) —ontinue 
C) if Ц elif Ц else
D) for -in
E) while 
F) print ()
G) input ()
H) break

$$$ 52
Python.  Print statement:
A) Control flow      
B) —ontinue 
C) if Ц elif Ц else
D) for -in
E) while 
+F) print ()
G) input ()
H) break

$$$ 53
Python.  Input operator:
A) Control flow      
B) —ontinue 
C) if Ц elif Ц else
D) for -in
E) while 
F) print ()
+G) input ()
H) break

$$$ 54
Python.  Instructions, where some operators can be executed repeatedly depending on certain conditions:
A) Control flow      
+B) Loop 
C) if Ц elif Ц else
D) for -in
E) while 
F) print ()
G) input ()
H) break

$$$ 55
Python.  Data type - a set of elements, in the following order:
A) Literal
B) Numbers
C) String
+D) List
E) Operator
F) Variable
G) Expression

$$$ 56
Python.  Data type - a set of elements following in a certain order, indicated by square brackets ([ ]):
A) Literal
B) Numbers
C) String
+D) List
E) Operator
F) Variable
G) Expression

$$$ 57
Python.  List items are accessed based on:
A) Literal
B) Numbers
C) String
+D) Index
E) Operator
F) Variable
G) Expression

$$$ 58
Python.  Method for adding new items to the end of the list:
+A) append() 
B) insert()
C) del
D) pop() 
E) remove()
F) print ()
G) input ()

$$$ 59
Python.  Method for adding new items to any position in the list:
A) append() 
+B) insert() 
C) del
D) pop() 
E) remove()
F) print ()
G) input ()

$$$ 60
Python.  Method for removing an item from the list by position number:
A) append() 
B) insert() 
+C) del  
D) pop() 
E) remove()
F) print ()
G) input ()

$$$ 61
Python.  Method for removing the last item from the list, but allows you to work with it after removal:
A) append() 
B) insert() 
C) del  
+D) pop()
E) remove()
F) print ()
G) input ()

$$$ 62
Python.  Method for removing an item from a list by value:
A) append() 
B) insert() 
C) del  
D) pop()
+E) remove()
F) print ()
G) input ()

$$$ 63
Python.  Method for constantly sorting list items:
A) append() 
B) insert() 
C) del  
D) pop()
E) remove()
+F) sort() 
G) input ()

$$$ 64
Python.  Method for time-sorting of list items:
A) append() 
B) insert() 
C) del  
D) pop()
E) remove()
F) sort() 
+G) sorted()  

$$$ 65
Python.  Methods for sorting list items:
A) append() 
B) insert() 
C) del  
D) pop()
E) remove()
+F) sort() 
+G) sorted()  

$$$ 66
Python.  Method for rearranging list items (list reversal):
A) append() 
B) insert() 
+C) reverse() 
D) pop()
E) remove()
F) sort() 
G) sorted()  

$$$ 67
Python.  Method for determining the length of a list:
A) append() 
B) insert() 
C) reverse() 
+D) len() 
E) remove()
F) sort() 
G) sorted()  

$$$ 68
Python. A fragment of program code (subprogram) designed to solve one specific problem, which can be accessed from another place in the program:
+A) Function
B) Integers
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 69
Python. Ways to pass arguments to functions:
+A) Positional Arguments
+B) Named Arguments
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 70
Python. The type of the arguments when calling the function each argument must be assigned to the parameter in the function definition:
+A) Positional Arguments
B) Named Arguments
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 71
Python. The type of arguments that are a Ђname-valueї pair passed to the function:
A) Positional Arguments
+B) Named Arguments
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 72
Python. Unordered collection of arbitrary objects with key access (associative array):
A) Positional Arguments
+B) Dictionary
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 73
Python. Data structures, which are a collection of Ђkey-valueї pairs. Each key is associated with a certain value, and the program can get the value associated with the given key:
A) Positional Arguments
+B) Dictionary
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 74
Python. Method for enumerating dictionary elements; it returns a list of all keys:
+A) key()
B) insert() 
C) del  
D) pop()
E) remove()
F) sort() 
G) input ()

$$$ 75
Python. The method that is used to retrieve values in a dictionary without a key. Values are retrieved from the dictionary without checking for possible repetitions:
A) key()
+B) values() 
C) del  
D) pop()
E) remove()
F) sort() 
G) input ()

$$$ 76
Python. The function that is used to input values::
A) key()
B) values() 
C) del  
D) pop()
E) remove()
F) int() 
+G) input ()

$$$ 77
Python. The function that is used to enter integers:
A) key()
B) values() 
C) del  
D) pop()
E) remove()
+F) int()
G) input ()

$$$ 78
Python. Immutable ordered sequence of zero or more object references:
+A) Tuple 
B) Dictionary
C) String
D) Floating point numbers
E) Operator
F) Variable
G) Expression

$$$ 79
Python. Function to call data type - tuple:
A) key()
+B) tuple()
C) del  
D) pop()
E) remove()
F) int() 
G) input ()

$$$ 80
Python. A data type - a named tuple - can be created by a function:
A) key()
B) tuple() 
+C) namedtuple() 
D) pop()
E) remove()
F) int() 
G) input ()

$$$ 81
Python. A data type - list - can be created by a function:
A) key()
B) tuple() 
C) namedtuple() 
+D) list()
E) remove()
F) int() 
G) input ()

$$$ 82
The sequence of procedures for solving the task:
+A) Algorithm 
B) Argument.
C) Blt.
D) Return value.
E) Built-in function.
F) Built-in type.
G) Function Call.

$$$ 83
The link to object that is passed to the function:
A) Algorithm 
+B) Argument.
C) Blt.
D) Return value.
E) Built-in function.
F) Built-in type.
G) Function Call.

$$$ 84
Binary value (0 or 1):
A) Algorithm 
B) Argument.
+C) Blt.
D) Return value.
E) Built-in function.
F) Built-in type.
G) Function Call.

$$$ 85
The object or link obtained as a result of calling the function:
A) Algorithm 
B) Argument.
C) Blt.
+D) Return value.
E) Built-in function.
F) Built-in type.
G) Function Call.

$$$ 86
Built-in functions in Python, for example max (), abs (), int (), str () or hash ():
A) Algorithm 
B) Argument.
C) Blt.
D) Return value.
+E) Built-in function.
F) Built-in type.
G) Function Call.

$$$ 87
A data type built into Python, for example: str, float, int, bool, list, tuple, dict or set:
A) Algorithm 
B) Argument.
C) Blt.
D) Return value.
E) Built-in function.
+F) Built-in type.
G) Function Call.

$$$ 88
An expression that performs (runs) a function and returns a value:
A) Algorithm 
B) Argument.
C) Blt.
D) Return value.
E) Built-in function.
F) Built-in type.
+G) Function Call.

$$$ 89
A combination of literals, variables, operators, and function calls that can be executed and the result obtained:
+A) Expression  
B) Evaluate an expression
C) Raise an error
D) Global code
E) Identifier
F) Interpreter
G) Source code 

$$$ 90
Simplification (Evaluate) of an expression to a value by applying operators to the operands of an expression according to priority rules:
A) Expression  
+B) Evaluate an expression
C) Raise an error
D) Global code
E) Identifier
F) Interpreter
G) Source code 

$$$ 91
Error message during compilation or program execution:
A) Expression  
B) Evaluate an expression
+C) Raise an error
D) Global code
E) Identifier
F) Interpreter
G) Source code 

$$$ 92
A variable defined outside of a function or class:
A) Expression  
B) Evaluate an expression
C) Raise an error
+D) Global code
E) Identifier
F) Interpreter
G) Source code 

$$$ 93
The name used to identify a variable, function, class, module, or other object:
A) Expression  
B) Evaluate an expression
C) Raise an error
D) Global code
+E) Identifier
F) Interpreter
G) Source code 

$$$ 94
A program that executes code written in a high-level language, one line at a time:
A) Expression  
B) Evaluate an expression
C) Raise an error
D) Global code
E) Identifier
+F) Interpreter
G) Source code 

$$$ 95
A program or fragment of a program in a high-level programming language:
A) Expression  
B) Evaluate an expression
C) Raise an error
D) Global code
E) Identifier
F) Interpreter
+G) Source code 

$$$ 96
The working line of the terminal application; used to enter system commands and run programs:
+A)  омандна€ строка (command line) 
B)  омментарий (comment) 
C)  омпил€тор (compiler) 
D) Ћитерал (literal)
E) »дентификатор (identifier) 
F) »нтерпретатор (interpreter) 
G) »сходный код (source code) 

$$$ 97
Explanatory text (ignored by the compiler) to help the reader understand the purpose of the code:
A)  омандна€ строка (command line)
+B)  омментарий (comment) 
C)  омпил€тор (compiler) 
D) Ћитерал (literal)
E) »дентификатор (identifier) 
F) »нтерпретатор (interpreter) 
G) »сходный код (source code) 

$$$ 98
A program that converts the code of a high-level language, such as Python, into low-level code, such as the code of a Python virtual machine:
A)  омандна€ строка (command line)
B)  омментарий (comment) 
+C)  омпил€тор (compiler) 
D) Ћитерал (literal)
E) »дентификатор (identifier) 
F) »нтерпретатор (interpreter) 
G) »сходный код (source code) 

$$$ 99
Textual representation of the values of the embedded numeric and string data types in the source code, such as 123, Hello, and True:
A)  омандна€ строка (command line)
B)  омментарий (comment) 
C)  омпил€тор (compiler) 
+D) Ћитерал (literal) 
E) »дентификатор (identifier) 
F) »нтерпретатор (interpreter) 
G) »сходный код (source code) 

$$$ 100
File with extension .py, structured so that its tools can be reused in other Python programs:
A)  омандна€ строка (command line)
B)  омментарий (comment) 
C)  омпил€тор (compiler) 
D) Ћитерал (literal) 
+E) ћодуль (module) 
F) »нтерпретатор (interpreter) 
G) »сходный код (source code) 

$$$ 101
Data type - a set of elements following in a given order, indicated by square brackets   [ ]:  
A) Integer (÷елые числа).
B) Float (¬ещественные числа). 
C) String (—трока)
+D) List (—писок).  
E) Tuple ( ортеж). 
F) Set (ћножество).  
G) Dictionary (—ловарь).
H) Logical (Ћогические значени€).

$$$ 102
Immutable (неизмен€емые) Lists:  
A) Integer (÷елые числа).
B) Float (¬ещественные числа). 
C) String (—трока)
D) List (—писок).  
+E) Tuple ( ортеж). 
+F) Set (ћножество).  
+G) Dictionary (—ловарь).
H) Logical (Ћогические значени€).

$$$ 103
Structure  nums = [0 , 1 , 2 , 3 , 4 , 5]- is:  
A) Integer (÷елые числа).
B) Float (¬ещественные числа). 
C) String (—трока)
+D) List (—писок).  
E) Tuple ( ортеж). 
F) Set (ћножество).  
G) Dictionary (—ловарь).
H) Logical (Ћогические значени€).

$$$ 104
Instructions for initializing a list of three-element list containing string values:  
+A) quarter = [ 'January' , 'February' , 'March' ] 
B) print(list [0] )
C) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
D) min(list)
E) max(list)
F) list[i]=x
G) del list [i]
H) list [i:j:k]

$$$ 105
Instructions for printing the first value of a list  (list):  
A) list = [ 'January' , 'February' , 'March' ] 
+B) print(list[0] ) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) max(list)
F) list[i]=x
G) del list[i]
H) list[i:j:k]

$$$ 106
Instructions for creating a multidimensional list (list) of two elements, each of which in itself is a list of three elements containing integer values:  
A) list = [ 'January' , 'February' , 'March' ], 3
B) print(list[0] ) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
+D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) max(list)
F) list[i]=x
G) del list[i]
H) list[i:j:k]

$$$ 107
Instruction to print the list values contained in the two, certain elements of the internal list:  
A) list = [ 'January' , 'February' , 'March' ] ,3
B) print(list[0] ) 
+C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) max(list)
F) list[i]=x
G) del list[i]
H) list[i:j:k]

$$$ 108
Instruction to determine the list item with the highest  (max) value in accordance with alphabetically ("dictionary") order:  
A) list = [ 'January' , 'February' , 'March' ] ,3
B) print(list[0] ) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
+E) max(list)
F) list[i]=x
G) del list[i]
H) list[i:j:k]

$$$ 109
Instruction to replace the list item with the number i for the value of x:
A) list = [ 'January', 'February' , 'March' ] ,3
B) print(list[0] ) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) max(list)
+F) list[i]=x			
G) del list[i]
H) list[i:j:k]

$$$ 110
Instructions for removing (deleting) an item with number i from the list:
A) list = [ 'January' , 'February' , 'March' ] ,3
B) print(list[0] ) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) max(list)
F) list[i]=x
+G) del list[i]
H) list [i:j:k]

$$$ 111
Instructions for finding a slice (срез) of a list that contains elements of the list (list) with numbers from i to j in increments of k:  
A) list = [ 'January' , 'February' , 'March' ] ,3
B) print(list[0] ) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) max(list)
F) list[i]=x
G) del list[i]
+H) list [i:j:k] 

$$$ 112
Instructions for finding the list item with the smallest (min) value in accordance with the alphabetical ("dictionary") order:  
A) list = [ 'January' , 'February' , 'March' ] , 3
+B) min(list) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) max(list)
F) list[i]=x
G) del list[i]
H) list [i:j:k] 

$$$ 113
Instructions for determining the number of list items list:  
A) list = [ 'January' , 'February' , 'March' ] , 3
B) min(list) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
+E) len (list)
F) list[i]=x
G) del list[i]
H) list [i:j:k] 

$$$ 114
Instructions for creating (packing) a tuple:  
A) list = [ 'January' , 'February' , 'March' ] ,3
+B) colors-tuple = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' ) 
C) print( '\nTop Left 0,0 :' , list[1][0] )
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) len (list)
F) list [i]=x
G) del list[i]
H) list [i:j:k] 

$$$ 115
Method for deleting item i from list list:
A) list = [ 'January' , 'February' , 'March' ] ,3
B) colors-tuple = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' )
C) phonetic-set = { 'Alpha' , 'Bravo' , 'Charlie' }
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) list.pop(i)	
F) list[i]=x
+G) del list[i]
H) list [i:j:k] 

$$$ 116
Instructions for creating a set:  
A) list = [ 'January' , 'February' , 'March' ] ,3
B) colors-tuple = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' )
+C) phonetic-set = { 'Alpha' , 'Bravo' , 'Charlie' }	
D) list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
E) len (list)
F) list [i]=x
G) del list[i]
H) list [i:j:k] 

$$$ 117
A method that adds an element x to a set:
+A) set.add (x)  
B) set.update (x, y, z)
C) set.pop ()
D) set1.intersection(set2)
E) set1.difference(set2)
F) set1.union(set2)

$$$ 118
A set method that adds multiple elements to a set:
A) set.add (x)  
+B) set.update (x, y, z) 	
C) set.pop ()
D) set1.intersection(set2)
E) set1.difference(set2)
F) set1.union(set2)

$$$ 119
A set method that deletes one element from a set at random:
A) set.add (x)  
B) set.update (x, y, z) 	
+C) set.pop ()		
D) set1.intersection(set2)
E) set1.difference(set2)
F) set1.union(set2)
G) set.discard( i )

$$$ 120
A set method that returns elements belonging to both sets set1 and set2 (intersection of sets set1 & set2):
A) set.add (x)  
B) set.update (x, y, z) 	
C) set.pop ()		
+D) set1.intersection (set2) 
E) set1.difference (set2)
F) set1.union(set2)

$$$ 121
A set method that returns elements from the set set1 that are not in set2 (разность множеств  set1 - set2):
A) set.add (x)  
B) set.update (x, y, z) 	
C) set.pop ()		
D) set1.intersection (set2) 
+E) set1.difference (set2) 	

$$$ 122
A container that can contain multiple data elements as a set of key: value pairs:  
A) Integer (÷елые числа).
B) Float (¬ещественные числа). 
C) String (—трока)
D) List (—писок).  
E) Tuple ( ортеж). 
F) Set (ћножество).  
+G) Dictionary (—ловарь).
H) Logical (Ћогические значени€).

$$$ 123
A statement that checks for a condition that evaluates a given expression: True или False:  
+A) if: 
B) else:
C) break
D) forЕin
E) return

$$$ 124
An operator that executes if the conditional expression is false:  
A) if: 
+B) else:
C) elif:
D) forЕin
E) while 

$$$ 125
An instruction that performs an alternative check for the if condition and the execution of the given instructions:  
A) if: 
B) else:
+C) elif:
D) forЕin
E) while

$$$ 126
The complete structure of the conditional operator:  
+A) if: 
+B) else:
+C) elif:
D) forЕin
E) while

$$$ 127
The result of the program at n =5:
if n % 2 == 0:
print('Ёто число четное')
else:
print('Ёто число нечетное')
A) число увеличить в 2 раза
B) число уменьшить в 2 раза
C) это число четное
+D) это число нечетное 
E) n=5

$$$ 128
The result of the program, provided that if the first number is greater than the second, then increase each number by 2 times, otherwise, reduce it by half, with values  a=5, b=2:
if a > b:
a = a * 2
b = b * 2
else:
a = a/2
b = b/2
print('a =', a)
print('b =', b)
+A) a= 10  
B) a= 2.5
+C) b= 4  
D) b= 2
E) n=5 

$$$ 129
The result of the program, provided that if the first number is greater than the second, then increase each number by 2 times, otherwise, reduce it by half, with values  a=5, b=22:
if a > b:
a = a * 2
b = b * 2
else:
a = a/2
b = b/2
print('a =', a)
print('b =', b)
A) a= 10 
+B) a= 2.5 
C) b= 44 
+D) b= 11 
E) n=55

$$$ 130
Variable value  с after program execution:
a = 40
b = 10
b = Ца/2 * b
if a < b:
с = b - a
else:
c = a Ц 2 * b
A) a = 40 
B) a = 2.5  
C) b = 10
D) b = -200
E) с =-240
+F) c =  440 

$$$ 131
Determine the maximum value of m from two given real numbers:
a=40
b=10
if a > b:
    m = a
else:
    m = b
print (m)
A) a= 40 
B) m= 2.5  
C) b= 10
D) b= -200
+E) m= 40 
F) m=  10

$$$ 132
Determine the maximum value of m from two given real numbers:
a=40
b=10
m=max(a, b)
print (m)
A) a= 40 
B) a= 2.5  
C) b= 10
D) b= -200
+E) m= 40 
F) m= 10 

$$$ 133
Determine the values of the variables x and y, with conditionals x=15, y=2:
If х > у :
temp = х
х = у
у = temp
else:
    x = y
+A) x= 2 
B) x= 15  
C) y= 2 
+D) y= 15 
E) m= 40 
F) m= 10 

$$$ 134
Determine the values of the variables x and y, with conditionals x=3, y=20:
if х > у :
temp = х
х = у
у = temp
else:
    x = y
+A) x= 20 
B) x= 3
+C) y= 20
D) y= 3
E) m= 40 
F) m= 10 

$$$ 135
Determine the values of the variable x, with conditionals x=6:
if x>5 :
    print( 'x>5' )
elif x<5 :
    print( 'x< 5' )
else :
    рrint( 'x=5' )
if x> 7 and x<9 :
    print( 'x=8' )
if x == 1 or x == 3 :
    print( 'x=1 or 3' )
A) x= 2 
B) x= 5  
+C) x>5 
D) x< 5 
E) x= 8 
F) x=1 

$$$ 136
The operator input integer number:
A) рrint( 'x=5' ) 
B) рrint (5) 
C) рrint (a*b) 
+D) int(input())
E) float (input())

$$$ 137
The operator input real number:
A) рrint( 'x=5' )
B) рrint (5) 
C) рrint (a*b) 
D) int(input())
+E) float(input()) 

$$$ 138
Correct entry statement output (print):
+A) рrint( 'x=5' ) 
B) рrint (5) *
+C) рrint (a*b) 
D) int(input())
E) float (input())

$$$ 139
Operators to output the real value of a variable x=5.123:
A) рrint( 'x=5' ) 
B) рrint (5) 
C) рrint (a*b) 
+D) рrint (С% .3f С% x) 
E) рrint (С% 8.5f С% x) 

$$$ 140
Operators to output the real value of a variable x = -2.12 (наиболее оптимальный):
A) рrint( 'x=5' ) 
B) рrint (5) 
+C) рrint (С% 5.2f С% x) 
D) рrint (С% .3f С% x) 
E) рrint (С% 7.5f С% x) 

$$$ 141
The result of the execution of the program fragment:
x= 5.123
print (С%  7.3f  С% x)
+A) __5.123
B) __5.12300
C) __5.1
D) _5.123
E) _5.12

$$$ 142
The result of the execution of the program fragment:
x= -5.123
print (С%  7.2f  С% x)
+A) __-5.12
B) __5.12300
C) __-5.1
D) _-5.123
E) _-5.12

$$$ 143
Define the value of the variable c:
a = 5
a = a + 6
b = Цa
c = a Ц 2 * b
A) 5
B) 11
C) -11
D) 22
+E) 33 

$$$ 144
Define the value of the variable c:
a = 40
b = 10
b = Ца/2 * b
c = b + a * 2
A) 5
B) 11
C) -110
+D) -120 
E) 200 

$$$ 145
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
print (a[3])
A) [2]
+B) [37] 
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
F) [20, 61, 2]
G) [37, 4, 55]
H) 10

$$$ 146
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
print(a)
A) [2]
B) [37] 
C) [4]
D) [55]
+E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39] 
F) [20, 61, 2]
G) [37, 4, 55]
H) 10

$$$ 147
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
print(a[4])
A) [2]
B) [37] 
+C) [4] 
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
F) [20, 61, 2]
G) [37, 4, 55]
H) 10

$$$ 148
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
print (a[0:2])
A) [2]
B) [37] 
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
+F) [20, 61] 
G) [37, 4, 55]
H) 10

$$$ 149
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
print (a [3:6])
A) [2]
B) [37] 
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
F) [20, 61, 2]
+G) [37, 4, 55] 
H) 10

$$$ 150
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
b = len (a)
print (b)
A) 2
B) [37] 
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
F) [20, 61, 2]
G) 9
+H) 10

$$$ 151
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
del a[3]
print (a)
A) [2]
B) [37] 
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
+F) [20, 61, 2, 4, 55, 36, 7, 18, 39]
G) [37, 4, 55]
H) 10

$$$ 152
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
print (max (a))
A) 2
+B) 61 
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
F) [20, 61, 2, 4, 55, 36, 7, 18, 39]
G) [37, 4, 55]
H) 10

$$$ 153
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
print (min (a))
+A) 2
B) 61
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
F) [20, 61, 2, 4, 55, 36, 7, 18, 39]
G) [37, 4, 55]
H) 10

$$$ 154
The result of the program fragment:
a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
b=min (a)
print(b)
+A) 2
B) 61
C) [4]
D) [55]
E) [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
F) [20, 61, 2, 4, 55, 36, 7, 18, 39]
G) [37, 4, 55]
H) 10 

$$$ 155
Operation for determining the number of elements in the lst list:
+A) len (lst) 
B) lst ? n
C) lst [i:j:k]
D) min (lst)
E) max (lst)
F) del lst [i]
G) del lst [i:j]

$$$ 156
Operation for determining n-fold repetition of the lst list:
A) len (lst) 
+B) lst ? n
C) lst [i:j:k]
D) min (lst)
E) max (lst)
F) del lst [i]
G) del lst [i:j]

$$$ 157
The operation to find the slice (срез) of the lst list:
A) len (lst) 
B) lst ? n
+C) lst [i:j:k]
D) min (lst)
E) max (lst)
F) del lst [i]
G) del lst [i:j]

$$$ 158
The operation to find the element with the smallest value in the lst list:
A) len (lst) 
B) lst ? n
C) lst [i:j:k]
+D) min (lst)
E) max (lst)
F) del lst [i]
G) del lst [i:j]

$$$ 159
The operation to find the element with the highest value in the lst list:
A) len (lst)
B) lst ? n
C) lst [i:j:k]
D) min (lst)
+E) max (lst) 
F) del lst [i]
G) del lst [i:j]

$$$ 160
The operation to delete the element with the number i from the lst list:
A) len (lst)
B) lst?n
C) lst [i:j:k]
D) min (lst)
E) max (lst)
+F) del lst [i] 
G) del lst [i:j]

$$$ 161
Operation to delete lst list items in a slice:
A) len (lst)
B) lst ? n
C) lst [i:j:k]
D) min (lst)
E) max (lst)
F) del lst [i]
+G) del lst [i:j] 

$$$ 162
Integer value:
+A) a= 154
B) a= 154.02
C) a= СRedТ
D) a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
E) a = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' )
F) a= { 'Alpha' , 'Bravo' , 'Charlie' }

$$$ 163
Float value:
A) a = 154
+B) a = 154.02
C) a = СRedТ
D) a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
E) a = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' )
F) a = { 'Alpha' , 'Bravo' , 'Charlie' }

$$$ 164
String type value:
A) a = 154
B) a = 154.02
+C) a = СRedТ
D) a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
E) a = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' )
F) a = { 'Alpha' , 'Bravo' , 'Charlie' }

$$$ 165
List of Python: 
A) a = 154
B) a = 154.02
C) a = СRedТ
+D) a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
E) a = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' )
F) a = { 'Alpha' , 'Bravo' , 'Charlie' }

$$$ 166
Tuple of Python: 
A) a= 154
B) a= 154.02
C) a= СRedТ
D) a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
+E) a = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' ) 
F) a= { 'Alpha' , 'Bravo' , 'Charlie' }

$$$ 167
Set of  Python: 
A) a = 154
B) a = 154.02
C) a = СRedТ
D) a = [20, 61, 2, 37, 4, 55, 36, 7, 18, 39]
E) a = ( 'Red' , 'Green' , 'Red' , 'Blue' , 'Red' )
+F) a = { 'Alpha' , 'Bravo' , 'Charlie' }

$$$ 168
Loop executing the loop body until the logical expression is true:
A) if: 
B) else:
C) elif:
D) for Еin
+E) while    

$$$ 169
A loop executing a loop body a specific number of times:
A) if: 
B) else:
C) elif:
+D) for Еin
E) while

$$$ 170
A loop executing a loop body a specified number of times:
A) if: 
B) else:
C) elif:
+D) for Еin
E) while

$$$ 171
The cycle in which the variable is indicated and the set of values along which the variable will run. Many values can be specified by a list, tuple, string, or range:
A) if: 
B) else:
C) elif:
+D) for Еin   
E) while

$$$ 172
The result of the execution of the program fragment:
for i in 1, 2, 3, 'one', 'two':
    print(i, end ='  ' )
A) 1 2 3
B) 1 2 3 one
+C) 1 2 3 one two 
D) 1,2,3, one, two
E) 1-2-3-one-two

$$$ 173
The result of the execution of the program fragment 
for i  in 1, 2, 3, 'one', 'two':
    print (i, end=' - ' )
A) 1 2 3
B) 1 2 3 one
C) 1 2 3 one two 
D) 1,2,3, one, two
+E) 1-2-3-one-two- 

$$$ 174
The result of the execution of the program fragment
for i in range (4):
    print(i, end=' \ ' )
A) 0 1 2 3
B) 1 2 3 one
C) 1 2 3 one two 
D) 1,2,3, one, two
+E) 0\1\2\3\   

$$$ 175
The result of the execution of the program fragment 
for i in range (4):
print (i, end='  '  )
+A) 0 1 2 3 
B) 1 2 3 4
C) 1 2 3 one two 
D) 1,2,3, one, two
E) 1-2-3-4 

$$$ 176
The result of the execution of the program fragment 
sum = 0
n = 3
for i in range (1, n + 1):
    sum += i
print (sum)
A) 15
B) 3
+C) 6 
D) 10
E) 25

$$$ 177
The result of the execution of the program fragment 
n = 0
for i in range (1, 6):
     n = n+i
print(n)
+A) 15 
B) 5 
C) 6 
D) 10
E) 25

$$$ 178
The result of the execution of the program fragment:
chars = [ 'A' , 'B', 'C' ]
for i in enumerate (chars) :
        print ( i , end = ' ' )
+A) A  B C 
B) (0, 'A') (1, 'B') (2, 'C') 
C) 0 1 2
D) 10
E) 25

$$$ 179
The result of the execution of the program fragment  (values i и j):
for i in  range (1, 2):
print( i )
for j in  range (1, 3):
     print( j )
+A) i =1 
B) i = 2
+C) j = 1
+D) j = 2
E) j = 3

$$$ 180
The result of the execution of the program fragment  (values s и s1):
s=0
s1=0
i = 1
while i<4 :
    s=s+1
    i += 1
    j = 1
    while j <2 :
        s1=s1+1
        j += 1
print ( s )
print ( s1 )
+A) s =3 
B) s = 2
C) s1 = 1
D) s1 = 2
+E) s1 = 3

$$$ 181
Parameter n values when executing a loop:
m = [1, 2, 3, 4, 5]
for n in m:
    print (n)
A) от 0 до 5
+B) от 1 до 5  
C) от 0 до 4
D) от 1 до 4
E) от 2 до 5

$$$ 182
Parameter i values when executing a loop: 
for i in range (10, 21):
print (i)
A) от 10 до 21 
+B) от 10 до 20 
C) от 11 до 21 
D) от 11 до 20
E) от 12 до 21

$$$ 183
Parameter i values when executing a loop: 
for i in range (2, 10, 2):
print (i, end=" , ")
+A) 2, 4, 6, 8, 
B) 0, 1, 2, 3 
C) 5, 4, 3, 2, 1 
D) 1, 2, 3, 4, 5
E) 1 2 4 6 8

$$$ 184
Parameter i values when executing a loop: 
for i in range (5, 0, -1):
print (i, end=" , ")
A) 2, 4, 6, 8 
B) 0, 1, 2, 3 
+C) 5, 4, 3, 2, 1, 
D) 4, 3, 2, 1
E) 1 2 4 6 8

$$$ 185
Parameter i values when executing a loop: 
a= 6
b= 2
for i in range (a, b+1, -1):
print (i, end=" , ")
A) 2, 4, 6, 8 
B) 0, 1, 2, 3 
C) 5, 4, 3, 2, 1 
+D) 6, 5, 4,       
E) 1 2 4 6 8

$$$ 186
The result of the loop:
a = [0] * 5
for i in range (5):
    a[i] = i
print(a)
A) b = {2, 4, 6, 8} 
B) a = [0, 1, 2, 3] 
C) 5, 4, 3, 2, 1 
+D) a = [0, 1, 2, 3, 4]      
E) 1 2 4 6 8

$$$ 187
The result of the execution of the program fragment:
n=5
b = [0 for i in range (n - 1)] 
print (b)
A) {2, 4, 6, 8} 
B) [0, 1, 2, 3] 
+C) [0, 0, 0, 0] 
D) [1, 2, 3, 4]       
E) 1 2 4 6 8

$$$ 188
The result of the execution of the program fragment:
b = [i for i in 'ѕ–»¬≈“!'] 
print (b)
A) {2, 4, 6, 8} 
B) [0, 1, 2, 3] 
C) [0, 0, 0, 0] 
+D) ['ѕ', '–', '»', '¬', '≈', '“', '!'] 
E) 1 2 4 6 8

$$$ 189
The result of the execution of the program fragment:
a = [0, 1, 2, 3, 4, 5]
print (a [2:4 ] )
A) {2, 4, 6, 8} 
+B) [2, 3] 
C) [0, 0, 0, 0] 
D) ['ѕ', '–', '»', '¬', '≈', '“', '!'] 
E) [0, 1, 2, 3]

$$$ 190
The result of the execution of the program fragment:
a = set ([3, 6, 3, 5])
print (a)
A) {2, 4, 6, 8} 
B) [2, 3] 
+C) {3, 5, 6} 
D) ['ѕ', '–', '»', '¬', '≈', '“', '!'] 
E) {3, 6, 3, 5}

$$$ 191
Methods for determining (упаковки) a tuple:
+A) k = ( 'Red' , 'Green' , 'Red' , 'Blue' ) 
B) СcolorТ 
+C) pr = (200, 50)  
D) s1 = {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
E) [2, 3]
F) s1 = set ([3,6,3,5])

$$$ 192
The method  to initialize a set:
A) 154 
B) СcolorТ 
C) pr = (200, 50) 
D) s1 = {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
E) [2, 3]
+F) s2 = {3, 6, 3, 5}  

$$$ 193
Result:
s3=set (range (10))
print (s3)
+A) {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} 
B) СcolorТ 
C) (200, 50) 
D) {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
E) [2, 3]
F) {3, 6, 3, 5}  

$$$ 194
Result:
s2 = set ([7,3,6,3,7,5])
print (s2)
A) {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} 
B) СcolorТ 
C) (200, 50) 
D) {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
+E) {3, 5, 6, 7}  
F) {7, 3, 6, 3, 7, 5}  

$$$ 195
The result of the execution of the program fragment:
s1=set (range (5)) 
s1.add ('5')
print (s1)
+A) {0, 1, 2, 3, 4, '5'}  
B) {0, 1, 2, 3, 4, 5}  
C) (200, 50) 
D) {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
E) {3, 5, 6, 7}   
F) {7, 3, 6, 3, 7, 5}  

$$$ 196
The result of the execution of the program fragment:
s1=set (range (5)) 
s2=set (range (2))
s1.add ('5')
s3 = s1.intersection (s2)
print (s3)
A) {0, 1, 2, 3, 4, '5'}  
B) {0, 1, 2, 3, 4, 5}  
C) (200, 50) 
D) {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
+E) {0, 1}   
F) {7, 3, 6, 3, 7, 5}  

$$$ 197
The result of the execution of the program fragment:
 s1=set (range (5)) 
s2=set(range(2))
s1.add ('5')
s3 = s1.union (s2)
print(s3)
+A) {0, 1, 2, 3, 4, '5'}  
B) {0, 1, 2, 3, 4, 5}  
C) (200, 50) 
D) {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
E) {0, 1}   
F) {7, 3, 6, 3, 7, 5}

$$$ 198
A set method that returns a new set that includes all elements of set1 and all elements of set2 that are not in set1 (union of sets set1 | set2):
A) set.add (x)  
B) set.update (x, y, z) 	
C) set.pop ()		
D) set1.intersection (set2) 
E) set1.difference (set2) 	
+F) set1.union(set2)

$$$ 199
Dictionary initialization:
A) 154 
B) СcolorТ 
C) pr = (200, 50) 
+D) d = {'cat': 'кошка', 'dog': 'собака', 'mouse': 'мышь'} 
E) [2, 3]
F) s2 = {3, 6, 3, 5}  

$$$ 200
A dictionary method that returns a representation of all pairs (key, value) in a dictionary d:
A) d.keys()
+B) d.items()	
C) set.pop ()		
D) set1.intersection (set2) 
E) set1.difference (set2) 	
F) d.pop(k)
  
$$$ end

